{"version":3,"sources":["context/UserContext.js","pages/routes/RestrictedRoute.js","services/StorageService.js","services/AxiosService.js","services/SessionService.js","pages/HomePage.js","utils/forms.js","components/utilsTemplates/loading/Loading.js","components/auth/loginForm/LoginForm.js","pages/LoginPage.js","services/SpaceService.js","components/space/spaceCard/SpaceCard.js","components/UploadInput.js","components/space/SpacesContainer.js","pages/UserAccountPage.js","utils/validateAuth.js","components/auth/registerForm/RegisterForm.js","pages/RegisterPage.js","context/SpaceContext.js","services/PostService.js","components/space/posts/postCard/PostCard.js","pages/SpaceMemoryPage.js","components/utilsTemplates/notFoundComponent/NotFoundComponent.js","pages/NotFoundPage.js","pages/BackOfficePage.js","pages/SpaceSettingsPage.js","pages/routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","createContext","RestrictedRoute","Component","component","rest","user","useContext","render","props","to","pathname","state","from","location","StorageService","key","value","localStorage","setItem","err","console","error","getItem","names","forEach","name","removeItem","AxiosService","accessToken","axios","defaults","headers","common","SessionService","email","password","post","process","username","response","data","setTokens","get","refresh_token","this","getRefreshToken","tokenObject","setStorage","token","setInterceptors","getAccessToken","getStorage","deleteStorageItem","errorMessage","setErrorMessage","log","status","err401","Home","setUser","firstName","type","onClick","clearTokens","roles","includes","useForm","useState","setState","e","persist","target","Object","values","files","toFormData","FormData","keys","keyName","keyValue","file","append","Loading","role","aria-label","LoginForm","handleChange","isLoading","setIsLoading","redirectAfterLogin","a","requestTokens","fetchUserData","onSubmit","event","preventDefault","persistSession","htmlFor","id","placeholder","onChange","LoginPage","SpaceService","spaces","subscribers","length","spaceId","subscriberId","put","delete","message","SpaceCard","space","backOffice","validateSpace","index","spaceRoute","setSpaceRoute","useEffect","lastName","width","src","image","url","alt","moment","dateBirth","format","dateDeath","description","UploadInput","labelText","specificFieldName","isMultiple","restrictedFileTypes","fieldName","className","multiple","accept","SpacesContainer","userSpaces","setUserSpaces","getSpaces","getUserSpaces","isBefore","createNewSpace","action","method","cols","rows","relationDefunctText","map","UserAccountPage","validateAuth","errors","test","passwordInitial","passwordFinal","RegisterForm","history","useHistory","handleSubmit","createAccount","push","RegisterPage","SpaceContext","PostService","PostCard","deletePost","img","title","text","createdBy","style","height","SpaceMemoryPage","spaceData","setSpaceData","setSpace","spaceErrorMessage","setSpaceErrorMessage","spaceLocation","setValue","useLocation","getSpaceMemoryData","focusSpace","resultat","errorMessageSpace","createPost","posts","JSON","stringify","NotFoundComponent","NotFoundPage","BackOfficePage","unvalidatedSpaces","setUnvalidatedSpaces","splice","getUnvalidatedSpaces","SpaceSettingsPage","deleteSuccess","setDeleteSuccess","waitingSubscribers","setWaitingSubscribers","deleteSpace","getWaitingSubscribers","validateSubscriber","unvalidateSubscriber","Array","withRouter","spaceID","useMemo","path","exact","HomePage","Provider","App","refreshTokens","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d589a33d.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst UserContext = createContext(null);\r\n\r\nexport default UserContext;\r\n","// Ce component est utilisé pour rediriger un utilisateur non connecté\r\n// Si l'utilisateur est connecté : l'utilisateur arrive sur la page demandée\r\n// Sinon : l'utilisateur est redirigé vers la page de login\r\n\r\nimport React, { useContext } from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport UserContext from '../../context/UserContext';\r\n\r\nconst RestrictedRoute = ({ component: Component, ...rest }) => {\r\n  const { user } = useContext(UserContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        user ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: `/login`, state: { from: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default RestrictedRoute;\r\n","export default class StorageService {\r\n  /**\r\n   * La fonction permet de save une clé dans le local storage de l'application.\r\n   */\r\n  static setStorage(key, value) {\r\n    try {\r\n      localStorage.setItem(key, value);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * La fonction permet de récupérer une clé dans le local storage de l'application.\r\n   */\r\n  static getStorage(key) {\r\n    try {\r\n      const res = localStorage.getItem(key);\r\n      return res;\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * La fonction permet de supprimer une (ou plusieurs) clé(s) dans le local storage de l'application.\r\n   */\r\n  static deleteStorageItem(...names) {\r\n    try {\r\n      names.forEach((name) => {\r\n        localStorage.removeItem(name);\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\nclass AxiosService {\r\n  static setInterceptors(accessToken) {\r\n    axios.defaults.headers.common[['Authorization']] = `Bearer ${accessToken}`;\r\n  }\r\n}\r\n\r\nexport default AxiosService;\r\n","import axios from 'axios';\r\nimport StorageService from './StorageService';\r\nimport AxiosService from './AxiosService';\r\n\r\nexport default class SessionService {\r\n  /**\r\n   * Login - JWT\r\n   */\r\n\r\n  static async requestTokens(email, password) {\r\n    try {\r\n      const response = await axios.post(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/login_check`,\r\n        {\r\n          username: email,\r\n          password,\r\n        }\r\n      );\r\n      if (response && response.data) {\r\n        SessionService.setTokens(response.data);\r\n      }\r\n    } catch (err) {\r\n      console.error(`requestTokens : ${err}`);\r\n    }\r\n  }\r\n\r\n  static async fetchUserData() {\r\n    try {\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/account`\r\n      );\r\n      if (response && response.data) {\r\n        const user = response.data;\r\n        return user;\r\n      }\r\n    } catch (err) {\r\n      console.error(`fetchUserData : ${err}`);\r\n    }\r\n  }\r\n\r\n  static async refreshTokens() {\r\n    try {\r\n      const response = await axios.post(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/token/refresh`,\r\n        {\r\n          refresh_token: this.getRefreshToken(),\r\n        }\r\n      );\r\n      if (response && response.data) {\r\n        SessionService.setTokens(response.data);\r\n      }\r\n    } catch (err) {\r\n      console.error(`refreshTokens : ${err}`);\r\n    }\r\n  }\r\n\r\n  static setTokens(tokenObject) {\r\n    StorageService.setStorage('JWT', tokenObject.token);\r\n    StorageService.setStorage('JWT_REFRESH', tokenObject.refresh_token);\r\n    AxiosService.setInterceptors(this.getAccessToken()); // Les tokens ayant changé, on met à jour le header Authorization dans Axios\r\n  }\r\n\r\n  static getAccessToken() {\r\n    return StorageService.getStorage('JWT');\r\n  }\r\n\r\n  static getRefreshToken() {\r\n    return StorageService.getStorage('JWT_REFRESH');\r\n  }\r\n\r\n  static clearTokens() {\r\n    StorageService.deleteStorageItem('JWT', 'JWT_REFRESH');\r\n  }\r\n\r\n  /**\r\n   * Create a new user account\r\n   */\r\n  static async createAccount(data, errorMessage, setErrorMessage) {\r\n    try {\r\n      const response = await axios.post(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/user/new`,\r\n        data\r\n      );\r\n      if (response && response.data) {\r\n        console.log(response.data);\r\n        console.log('nouvel utilisateur créé !');\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      if (err.response.status === 401) {\r\n        // Vider l'objet errorMessage\r\n        for (let key in errorMessage) {\r\n          delete errorMessage[key];\r\n        }\r\n        errorMessage.err401 =\r\n          'Un compte a déjà été créer avec cette adresse email';\r\n        setErrorMessage(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport UserContext from '../context/UserContext';\r\nimport SessionService from '../services/SessionService';\r\n\r\nfunction Home() {\r\n  const { user, setUser } = useContext(UserContext);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Homepage</h1>\r\n      <p>{user ? `Bonjour, ${user.firstName}` : ''}</p>\r\n      <Link to=\"/login\">\r\n        <button type=\"button\">Log in</button>\r\n      </Link>\r\n      <Link to=\"/register\">\r\n        <button type=\"button\">Register</button>\r\n      </Link>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          SessionService.clearTokens();\r\n          setUser(null);\r\n        }}\r\n      >\r\n        logout\r\n      </button>\r\n      <Link to=\"/account\">\r\n        <button type=\"button\">Mes espaces</button>\r\n      </Link>\r\n      {user && user.roles.includes('ROLE_BACK_MANAGER') ? (\r\n        <Link to=\"/admin\">\r\n          <button type=\"button\">Back Office</button>\r\n        </Link>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { useState } from 'react';\r\n\r\nexport const useForm = () => {\r\n  const [state, setState] = useState({});\r\n\r\n  const handleChange = (e) => {\r\n    // Need to persist the event\r\n    e.persist();\r\n    if (e.target.type === 'file') {\r\n      // Dans le cas où l'input est un input d'importation de fichiers et pas du simple texte, on gère un peu différemment\r\n      if (e.target.name === 'images') {\r\n        // nom par défaut du component Upload. Accepte une ou plusieurs images, on les mets dans un tableau\r\n        setState(() => ({\r\n          ...state,\r\n          [e.target.name]: Object.values(e.target.files),\r\n        }));\r\n      } else {\r\n        // Ici c'est un champ spécifique comme la preuve d'acte de décès, pas besoin de le mettre dans un tableau car il n'y en aura jamais plusieurs\r\n        setState(() => ({ ...state, [e.target.name]: e.target.files[0] }));\r\n      }\r\n    } else {\r\n      setState(() => ({ ...state, [e.target.name]: e.target.value }));\r\n    }\r\n  };\r\n\r\n  return [state, handleChange];\r\n};\r\n\r\nexport const toFormData = (values) => {\r\n  const data = new FormData();\r\n  Object.keys(values).forEach((value) => {\r\n    const keyName = value;\r\n    const keyValue = values[value];\r\n    if (keyName === 'images') {\r\n      // Comme spécifié dans la documentation de l'API, pour les input file générique 'image', on envoie tous les fichiers avec en clé le nom du fichier.\r\n      keyValue.forEach((file) => {\r\n        data.append(file.name, file);\r\n      });\r\n    } else {\r\n      data.append(keyName, keyValue);\r\n    }\r\n  });\r\n  console.log(...data);\r\n  return data;\r\n};\r\n","import React from 'react';\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div>\r\n      Fetching user data... Ici, peut-être une animation super classe, tout en\r\n      restant sobre évidemment ?{' '}\r\n      <span role=\"img\" aria-label=\"emoji\">\r\n        😎😎😎\r\n      </span>{' '}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport SessionService from '../../../services/SessionService';\r\nimport UserContext from '../../../context/UserContext';\r\nimport { useForm } from '../../../utils/forms';\r\nimport Loading from '../../utilsTemplates/loading/Loading';\r\n\r\nfunction LoginForm({ location }) {\r\n  const [values, handleChange] = useForm();\r\n  const { user, setUser } = useContext(UserContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  if (isLoading) return <Loading />;\r\n\r\n  const redirectAfterLogin = location.state\r\n    ? location.state.from.pathname\r\n    : '/'; // si l'utilisateur a été redirigé vers login en essaynt d'accéder à une RestrictedRoute, on la garde en mémoire pour le rediriger après le login. Sinon, on le redirgie vers la home après le login.\r\n\r\n  if (user) return <Redirect to={redirectAfterLogin} />; // Si l'utilisateur est connecté, il ne peut pas voir la route /login (sans se déconnecter), on le redirige donc vers la page depuis laquelle il a essayé d'accéder à Login\r\n\r\n  async function persistSession() {\r\n    await SessionService.requestTokens(values.email, values.password);\r\n    setUser(await SessionService.fetchUserData());\r\n    setIsLoading(false); // fin du loading\r\n  }\r\n\r\n  const handleLogin = (event) => {\r\n    event.preventDefault(); // Empêcher le refresh de la page lors de l'envoi du formulaire\r\n    setIsLoading(true); // début du loading\r\n    persistSession();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleLogin}>\r\n        <label htmlFor=\"email\">\r\n          Adresse e-mail\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            placeholder=\"test@example.com\"\r\n            value={values.email || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"password\">\r\n          Mot de passe\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            value={values.password || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <input type=\"submit\" value=\"Me connecter\" />\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/register\">S'inscrire</Link>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport LoginForm from '../components/auth/loginForm/LoginForm';\r\n\r\nfunction LoginPage({ location }) {\r\n  return <LoginForm location={location} />;\r\n}\r\n\r\nexport default LoginPage;\r\n","import axios from 'axios';\r\n\r\nclass SpaceService {\r\n  static async getUserSpaces() {\r\n    try {\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/user/spaces`\r\n      );\r\n      if (response && response.data) {\r\n        return response.data.spaces;\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  static async createNewSpace(data) {\r\n    // data est une instance de FormData()\r\n    try {\r\n      const response = await axios.post(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/space/new`,\r\n        data\r\n      );\r\n      if (response && response.data) {\r\n        console.log(response.data);\r\n        console.log('nouvel espace créé');\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  static async getUnvalidatedSpaces() {\r\n    try {\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/spaces/unvalidated`\r\n      );\r\n      if (response && response.data) {\r\n        return response.data.spaces;\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  static async getWaitingSubscribers(id) {\r\n    try {\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/space/${id}/subscribers/waiting`\r\n      );\r\n      if (response) {\r\n        if (response.data.subscribers.length === 0)\r\n          return \"Aucun utilisateur en attente d'accès\";\r\n        return response.data.subscribers;\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  static async validateSubscriber(spaceId, subscriberId) {\r\n    try {\r\n      const response = await axios.put(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/space/${spaceId}/subscriber/${subscriberId}/validate`\r\n      );\r\n      if (response) {\r\n        console.log(response);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  static async unvalidateSubscriber(spaceId, subscriberId) {\r\n    try {\r\n      const response = await axios.put(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/space/${spaceId}/subscriber/${subscriberId}/unvalidate`\r\n      );\r\n      if (response) {\r\n        console.log(response);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  static async validateSpace(id) {\r\n    try {\r\n      const response = await axios.put(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/spaces/${id}/validation`\r\n      );\r\n      if (response) {\r\n        console.log(response && response.data);\r\n        console.log(response.data);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  static async deleteSpace(id) {\r\n    try {\r\n      const response = await axios.delete(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/space/${id}/delete`\r\n      );\r\n      if (response) {\r\n        console.log(response.data);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  static async editSpace(id) {\r\n    try {\r\n      const response = await axios.put(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/space/${id}/edit`\r\n      );\r\n      if (response) {\r\n        console.log(response.data);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  static async focusSpace(id) {\r\n    try {\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/space/${id}`\r\n      );\r\n      if (response && response.data) {\r\n        console.log('RUZE', response.data);\r\n        return response.data;\r\n      }\r\n    } catch (err) {\r\n      console.error('ERR', err);\r\n    }\r\n  }\r\n\r\n  static errorMessageSpace(status) {\r\n    let message = '';\r\n    switch (status) {\r\n      case 'SPACE_NOT_VALIDATED':\r\n        message = \"Votre espace n'a pas encore été validé par MEMORY\";\r\n        break;\r\n      case 'SPACE_NOT_SUBSCRIBED':\r\n        message = \"Vous n'êtes pas membre de cet espace de mémoire\";\r\n        break;\r\n      case 'SPACE_SUBSCRIBED_WAITING':\r\n        message =\r\n          \"Votre demande d'accès est en cours de traitement par le manager de l'espace\";\r\n        break;\r\n      case 'SPACE_INVITATION_WAITING':\r\n        message = \"Vous n'avez pas demander l'accès à cet espace de mémoire\";\r\n        break;\r\n      default:\r\n        message =\r\n          'Vous rencontrer un problème pour accéder à cet espace? Contactez MEMORY';\r\n    }\r\n    return message;\r\n  }\r\n}\r\n\r\nexport default SpaceService;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nfunction SpaceCard({ space, backOffice, validateSpace, index }) {\r\n  const [spaceRoute, setSpaceRoute] = useState();\r\n\r\n  useEffect(() => {\r\n    setSpaceRoute(() =>\r\n      backOffice\r\n        ? '/admin'\r\n        : `/space/${space.firstName}-${space.lastName}-${space.id}`\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Link\r\n        to={{\r\n          pathname: `${spaceRoute}`,\r\n          state: { id: `${space.id}` },\r\n        }}\r\n      >\r\n        <img width=\"300\" src={space.image.url} alt={space.firstName} />\r\n        <h1>\r\n          {space.firstName} {space.lastName}\r\n        </h1>\r\n        <h2>\r\n          Né le: {moment(space.dateBirth).format('D MMMM YYYY')}, Mort le:{' '}\r\n          {moment(space.dateDeath).format('D MMMM YYYY')}\r\n        </h2>\r\n        <p>{space.description}</p>\r\n        {backOffice ? (\r\n          <button type=\"button\" onClick={() => validateSpace(space.id, index)}>\r\n            Valider l'espace\r\n          </button>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpaceCard;\r\n","import React from 'react';\r\n\r\nfunction UploadInput({\r\n  labelText,\r\n  specificFieldName,\r\n  isMultiple,\r\n  handleChange,\r\n  restrictedFileTypes,\r\n}) {\r\n  const fieldName = specificFieldName || 'images';\r\n  return (\r\n    <div className=\"upload\">\r\n      <label htmlFor={fieldName}>{labelText} : </label>\r\n      <input\r\n        type=\"file\"\r\n        id={fieldName}\r\n        name={fieldName}\r\n        multiple={isMultiple}\r\n        accept={restrictedFileTypes}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadInput;\r\n","import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport SpaceService from '../../services/SpaceService';\r\nimport { useForm, toFormData } from '../../utils/forms';\r\nimport SpaceCard from './spaceCard/SpaceCard';\r\nimport UploadInput from '../UploadInput';\r\n\r\nfunction SpacesContainer() {\r\n  const [values, handleChange] = useForm();\r\n  const [userSpaces, setUserSpaces] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState();\r\n\r\n  useEffect(() => {\r\n    getSpaces();\r\n  }, []);\r\n\r\n  async function getSpaces() {\r\n    setUserSpaces(await SpaceService.getUserSpaces());\r\n  }\r\n\r\n  async function createSpace(event) {\r\n    event.preventDefault();\r\n    if (moment(values.dateBirth).isBefore(values.dateDeath)) {\r\n      setErrorMessage();\r\n      const data = toFormData(values); // Nécessaire de créer une instance de FormData quand on a un formulaire avec des images\r\n      await SpaceService.createNewSpace(data);\r\n      getSpaces();\r\n    } else {\r\n      setErrorMessage(\r\n        'La date de naissance ne peut pas etre avant la date décès'\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form action=\"/spaces\" method=\"post\" onSubmit={createSpace}>\r\n        <UploadInput\r\n          labelText=\"Photo du défunt\"\r\n          specificFieldName=\"spaceImage\"\r\n          handleChange={handleChange}\r\n        />\r\n        <UploadInput\r\n          labelText=\"Preuve acte de décès au format PDF\"\r\n          specificFieldName=\"spaceProof\"\r\n          restrictedFileTypes=\"application/pdf\"\r\n          handleChange={handleChange}\r\n        />\r\n        <label htmlFor=\"lastName\">\r\n          Nom\r\n          <input\r\n            type=\"text\"\r\n            name=\"lastName\"\r\n            id=\"lastName\"\r\n            value={values.lastName || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"firstName\">\r\n          Prénom\r\n          <input\r\n            type=\"text\"\r\n            name=\"firstName\"\r\n            id=\"firstName\"\r\n            value={values.firstName || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"dateBirth\">\r\n          Date de naissance\r\n          <input\r\n            type=\"date\"\r\n            name=\"dateBirth\"\r\n            id=\"dateBirth\"\r\n            value={values.dateBirth || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"dateDeath\">\r\n          Date de deces\r\n          <input\r\n            type=\"date\"\r\n            name=\"dateDeath\"\r\n            id=\"dateDeath\"\r\n            value={values.dateDeath || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        {errorMessage && <p>{errorMessage}</p>}\r\n        <label htmlFor=\"description\">\r\n          Qui etait ce ?\r\n          <textarea\r\n            name=\"description\"\r\n            id=\"description\"\r\n            cols=\"30\"\r\n            rows=\"10\"\r\n            value={values.description || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"relationDefunctText\">\r\n          Je suis son/sa...\r\n          <textarea\r\n            name=\"relationDefunctText\"\r\n            id=\"relationDefunctText\"\r\n            placeholder=\"ami depuis 20 ans / petit-fils / voisine...\"\r\n            cols=\"30\"\r\n            rows=\"10\"\r\n            value={values.relationDefunctText || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Creer un espace</button>\r\n      </form>\r\n      {userSpaces &&\r\n        userSpaces.map((space) => (\r\n          <SpaceCard key={space.space.id} space={space.space} />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpacesContainer;\r\n","import React, { useContext } from 'react';\r\nimport UserContext from '../context/UserContext';\r\nimport SpacesContainer from '../components/space/SpacesContainer';\r\n\r\nfunction UserAccountPage() {\r\n  const { user } = useContext(UserContext);\r\n\r\n  return (\r\n    <div>\r\n      <h2>{user.firstName}</h2>\r\n      <h2>{user.roles}</h2>\r\n      <SpacesContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserAccountPage;\r\n","const validateAuth = (values) => {\r\n  // Email must have \"@\"\" and \".\"\r\n  const emailTest = /\\S+@\\S+\\.\\S+/;\r\n  // Password security test\r\n  const passwordTest = /^(?=.*\\d)(?=.*[A-Z])[0-9a-zA-Z]{6,}$/;\r\n  const errors = {};\r\n  // Email Errors\r\n  if (!values.email) {\r\n    errors.email = 'Veuillez entrer un email';\r\n  } else if (!emailTest.test(values.email)) {\r\n    errors.email = 'Invalide email adresse';\r\n  }\r\n  // Password Errors\r\n  if (!values.passwordInitial) {\r\n    errors.passwordInitial = 'Veuillez entrer un mot de passe';\r\n  } else if (!passwordTest.test(values.passwordInitial)) {\r\n    errors.passwordInitial =\r\n      'Le mot de passe doit contenir au moins 6 lettre, une minuscule, une majuscule et un nombre';\r\n  }\r\n  // Check password = confirmPassword\r\n  if (!values.passwordFinal) {\r\n    errors.passwordFinal = 'Veuillez confirmer le mot de passe';\r\n  } else if (values.passwordInitial !== values.passwordFinal) {\r\n    errors.passwordFinal =\r\n      'Les mots de passe que vous avez entrés ne sont pas identiques';\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport default validateAuth;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Link, Redirect, useHistory } from 'react-router-dom';\r\nimport { useForm, toFormData } from '../../../utils/forms';\r\nimport validateAuth from '../../../utils/validateAuth';\r\nimport SessionService from '../../../services/SessionService';\r\nimport UserContext from '../../../context/UserContext';\r\nimport UploadInput from '../../UploadInput';\r\n\r\nfunction RegisterForm() {\r\n  // Custom hook useForm\r\n  const [values, handleChange] = useForm();\r\n  const [errorMessage, setErrorMessage] = useState({});\r\n  const { user } = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  if (user) return <Redirect to=\"/\" />; // Si l'utilisateur est connecté, il ne peut pas voir la route /login (sans se déconnecter)\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (Object.keys(validateAuth(values)).length === 0) {\r\n      setErrorMessage({});\r\n      const data = toFormData(values);\r\n      await SessionService.createAccount(data, errorMessage, setErrorMessage);\r\n      history.push('/account');\r\n    } else {\r\n      setErrorMessage(validateAuth(values));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Créer un compte</p>\r\n\r\n      <form action=\"/register\" method=\"post\" onSubmit={handleSubmit}>\r\n        <UploadInput\r\n          labelText=\"Photo de profil\"\r\n          specificFieldName=\"userImage\"\r\n          handleChange={handleChange}\r\n        />\r\n        <label htmlFor=\"lastName\">\r\n          Nom\r\n          <input\r\n            type=\"text\"\r\n            name=\"lastName\"\r\n            id=\"lastName\"\r\n            value={values.lastName || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"firstName\">\r\n          Prénom\r\n          <input\r\n            type=\"text\"\r\n            name=\"firstName\"\r\n            id=\"firstName\"\r\n            value={values.firstName || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"email\">\r\n          Email\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            value={values.email || ''}\r\n            onChange={handleChange}\r\n            placeholder=\"test@example.com\"\r\n          />\r\n        </label>\r\n        {errorMessage && <p>{errorMessage.err401}</p>}\r\n        {errorMessage && <p>{errorMessage.email}</p>}\r\n\r\n        <label htmlFor=\"passwordInitial\">\r\n          Mot de passe\r\n          <input\r\n            type=\"password\"\r\n            name=\"passwordInitial\"\r\n            id=\"passwordInitial\"\r\n            value={values.passwordInitial || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        {errorMessage && <p>{errorMessage.passwordInitial}</p>}\r\n        <label htmlFor=\"passwordFinal\">\r\n          Confirmer le mot de passe\r\n          <input\r\n            type=\"password\"\r\n            name=\"passwordFinal\"\r\n            id=\"passwordFinal\"\r\n            value={values.passwordFinal || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        {errorMessage && <p>{errorMessage.passwordFinal}</p>}\r\n        <button type=\"submit\">S'inscrire</button>\r\n      </form>\r\n\r\n      <Link to=\"/\">Go back Home</Link>\r\n      <Link to=\"/login\">Se connecter</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterForm;\r\n","import React from 'react';\r\nimport RegisterForm from '../components/auth/registerForm/RegisterForm';\r\n\r\nfunction RegisterPage() {\r\n  return <RegisterForm />;\r\n}\r\n\r\nexport default RegisterPage;\r\n","import { createContext } from 'react';\r\n\r\nconst SpaceContext = createContext(null);\r\n\r\nexport default SpaceContext;\r\n","import axios from 'axios';\r\n\r\nclass PostService {\r\n  static async createPost(id, data) {\r\n    try {\r\n      const response = await axios.post(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/space/${id}/post/new`,\r\n        data\r\n      );\r\n      if (response && response.data) {\r\n        console.log(response.data);\r\n        console.log('nouveau post créé');\r\n        return response.data;\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  static async deletePost(id) {\r\n    try {\r\n      const response = await axios.delete(\r\n        `${process.env.REACT_APP_API_BASE_URL}api/post/${id}/delete`\r\n      );\r\n      if (response) {\r\n        console.log(response.data);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n}\r\n\r\nexport default PostService;\r\n","import React, { useContext } from 'react';\r\nimport UserContext from '../../../../context/UserContext';\r\n\r\nfunction PostCard({ post, index, deletePost }) {\r\n  const { user } = useContext(UserContext);\r\n  return (\r\n    <div>\r\n      {post.img && <img src={post.img} alt=\"post img\" />}\r\n      <h1>{post.title}</h1>\r\n      <p>{post.text}</p>\r\n\r\n      <div>\r\n        <img\r\n          src={post.createdBy.image.url}\r\n          style={{ width: '40px' }}\r\n          {...{ height: '40px' }}\r\n          alt=\"profile pic of author\"\r\n        />\r\n        <p>\r\n          {post.createdBy.firstName} {post.createdBy.lastName}\r\n        </p>\r\n      </div>\r\n      {user.id === post.createdBy.id ? (\r\n        <button type=\"button\" onClick={() => deletePost(post.id, index)}>\r\n          Supprimer le post\r\n        </button>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostCard;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport SpaceContext from '../context/SpaceContext';\r\nimport SpaceService from '../services/SpaceService';\r\nimport UserContext from '../context/UserContext';\r\nimport { useForm, toFormData } from '../utils/forms';\r\nimport PostService from '../services/PostService';\r\nimport PostCard from '../components/space/posts/postCard/PostCard';\r\n\r\nfunction SpaceMemoryPage() {\r\n  // const [spaceID, setSpaceID] = useState();\r\n  const [spaceData, setSpaceData] = useState({});\r\n  const [space, setSpace] = useState({});\r\n  const [spaceErrorMessage, setSpaceErrorMessage] = useState('');\r\n  const { setValue } = useContext(SpaceContext);\r\n  // useLocation récupère la data passée dans le Link\r\n  const spaceLocation = useLocation();\r\n  const { user } = useContext(UserContext);\r\n  const [values, handleChange] = useForm();\r\n\r\n  useEffect(() => {\r\n    getSpaceMemoryData();\r\n  }, []);\r\n\r\n  async function getSpaceMemoryData() {\r\n    const resultat = await SpaceService.focusSpace(spaceLocation.state.id);\r\n    console.log(resultat);\r\n    if (resultat.status) {\r\n      console.log(SpaceService.errorMessageSpace(resultat.status));\r\n      setSpaceErrorMessage(SpaceService.errorMessageSpace(resultat.status));\r\n    } else {\r\n      setSpaceData(resultat);\r\n      setSpace(resultat.space);\r\n    }\r\n  }\r\n\r\n  async function createPost(event) {\r\n    event.preventDefault();\r\n    const data = toFormData(values);\r\n    await PostService.createPost(spaceLocation.state.id, data);\r\n    getSpaceMemoryData();\r\n  }\r\n\r\n  async function deletePost(id, index) {\r\n    await PostService.deletePost(id);\r\n    // postsData.splice(index, 1);\r\n    // setPostsData([...postsData]);\r\n  }\r\n\r\n  if (spaceErrorMessage) {\r\n    return (\r\n      <div>\r\n        <p>Pas cool</p>\r\n        <p>{spaceErrorMessage}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        Bienvenu dans l'espace de {space.firstName} {space.lastName}\r\n        {console.log(spaceData.posts)}\r\n      </p>\r\n      {JSON.stringify(space.createdBy) === JSON.stringify(user) ? (\r\n        <Link\r\n          to={{\r\n            pathname: `/space/${space.firstName}-${space.lastName}-${spaceLocation.state.id}/settings`,\r\n            state: { id: `${spaceLocation.state.id}` },\r\n          }}\r\n        >\r\n          <button type=\"button\">Settings</button>\r\n        </Link>\r\n      ) : (\r\n        ''\r\n      )}\r\n      <form action=\"/\" method=\"post\" onSubmit={createPost}>\r\n        <label htmlFor=\"content\">\r\n          <input\r\n            type=\"textarea\"\r\n            name=\"text\"\r\n            id=\"content\"\r\n            value={values.text || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">poster un souvenir</button>\r\n      </form>\r\n      {spaceData.posts &&\r\n        spaceData.posts.map((post, index) => (\r\n          <PostCard\r\n            key={post.id}\r\n            post={post}\r\n            index={index}\r\n            deletePost={deletePost}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpaceMemoryPage;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction NotFoundComponent() {\r\n  return (\r\n    <div>\r\n      Page non trouvée (erreur 404).\r\n      <Link to=\"/\">Retourner à la page d'accueil</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFoundComponent;\r\n","import React from 'react';\r\nimport NotFoundComponent from '../components/utilsTemplates/notFoundComponent/NotFoundComponent';\r\n\r\nfunction NotFoundPage() {\r\n  return <NotFoundComponent />;\r\n}\r\n\r\nexport default NotFoundPage;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport UserContext from '../context/UserContext';\r\nimport SpaceService from '../services/SpaceService';\r\nimport SpaceCard from '../components/space/spaceCard/SpaceCard';\r\n\r\nfunction BackOfficePage() {\r\n  const { user } = useContext(UserContext);\r\n  const [unvalidatedSpaces, setUnvalidatedSpaces] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getSpaces() {\r\n      setUnvalidatedSpaces(await SpaceService.getUnvalidatedSpaces());\r\n    }\r\n    getSpaces();\r\n  }, []);\r\n\r\n  function validateSpace(id, index) {\r\n    SpaceService.validateSpace(id);\r\n    unvalidatedSpaces.splice(index, 1);\r\n    setUnvalidatedSpaces([...unvalidatedSpaces]);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>{user.firstName}</p>\r\n      {unvalidatedSpaces.map((space, index) => (\r\n        <SpaceCard\r\n          key={space.id}\r\n          index={index}\r\n          space={space}\r\n          backOffice\r\n          validateSpace={validateSpace}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BackOfficePage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useLocation, Redirect } from 'react-router-dom';\r\nimport SpaceService from '../services/SpaceService';\r\n\r\nfunction SpaceSettingsPage() {\r\n  const spaceLocation = useLocation();\r\n  const [deleteSuccess, setDeleteSuccess] = useState();\r\n  const [waitingSubscribers, setWaitingSubscribers] = useState(\r\n    \"Chargement des utilisateurs ayant fait une demande d'accès...\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    getWaitingSubscribers();\r\n  }, []);\r\n\r\n  async function deleteSpace(id) {\r\n    setDeleteSuccess(await SpaceService.deleteSpace(id));\r\n  }\r\n\r\n  async function getWaitingSubscribers() {\r\n    const subscribers = await SpaceService.getWaitingSubscribers(\r\n      spaceLocation.state.id\r\n    );\r\n    setWaitingSubscribers(subscribers);\r\n  }\r\n\r\n  async function validateSubscriber(subscriberId) {\r\n    await SpaceService.validateSubscriber(spaceLocation.state.id, subscriberId);\r\n  }\r\n\r\n  async function unvalidateSubscriber(subscriberId) {\r\n    await SpaceService.unvalidateSubscriber(\r\n      spaceLocation.state.id,\r\n      subscriberId\r\n    );\r\n  }\r\n\r\n  if (deleteSuccess) return <Redirect to=\"/\" />;\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>Utilisateurs ayant fait une demande d'accès</h2>\r\n        <ul>\r\n          {waitingSubscribers instanceof Array\r\n            ? waitingSubscribers.map((user) => (\r\n                <li key={user.id}>\r\n                  Nom: {user.firstName}\r\n                  <button\r\n                    onClick={() => validateSubscriber(user.id)}\r\n                    type=\"button\"\r\n                  >\r\n                    Accepter la demande\r\n                  </button>\r\n                  <button\r\n                    onClick={() => unvalidateSubscriber(user.id)}\r\n                    type=\"button\"\r\n                  >\r\n                    Refuser la demande\r\n                  </button>\r\n                </li>\r\n              ))\r\n            : waitingSubscribers}\r\n        </ul>\r\n      </div>\r\n\r\n      <div>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => deleteSpace(spaceLocation.state.id)}\r\n        >\r\n          Supprimer l'espace\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpaceSettingsPage;\r\n","import React, { useState, useMemo } from 'react';\r\nimport { Route, Switch, withRouter } from 'react-router-dom';\r\nimport RestrictedRoute from './RestrictedRoute';\r\nimport HomePage from '../HomePage';\r\nimport LoginPage from '../LoginPage';\r\nimport UserAccountPage from '../UserAccountPage';\r\nimport RegisterPage from '../RegisterPage';\r\n// import SpacesListPage from '../SpacesListPage';\r\nimport SpaceMemoryPage from '../SpaceMemoryPage';\r\nimport NotFoundPage from '../NotFoundPage';\r\nimport BackOfficePage from '../BackOfficePage';\r\nimport SpaceContext from '../../context/SpaceContext';\r\nimport SpaceSettingsPage from '../SpaceSettingsPage';\r\n\r\nfunction Routes() {\r\n  const [value, setValue] = useState({});\r\n  const spaceID = useMemo(() => ({ value, setValue }), [value, setValue]);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact component={HomePage} />\r\n      <Route path=\"/login\" exact component={LoginPage} />\r\n      <Route path=\"/register\" exact component={RegisterPage} />\r\n      <RestrictedRoute path=\"/account\" exact component={UserAccountPage} />\r\n      <SpaceContext.Provider value={spaceID}>\r\n        {/* <RestrictedRoute path=\"/spaces\" exact component={SpacesListPage} /> */}\r\n        <RestrictedRoute\r\n          path=\"/space/:slug\"\r\n          exact\r\n          component={SpaceMemoryPage}\r\n        />\r\n        <RestrictedRoute path=\"/admin\" exact component={BackOfficePage} />\r\n        <RestrictedRoute\r\n          path=\"/space/:slug/settings\"\r\n          exact\r\n          component={SpaceSettingsPage}\r\n        />\r\n      </SpaceContext.Provider>\r\n      <Route component={NotFoundPage} /> {/* PageNotFound / 404 */}\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default withRouter(Routes);\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport './App.css';\r\nimport Routes from './pages/routes/Routes';\r\nimport UserContext from './context/UserContext';\r\nimport SessionService from './services/SessionService';\r\nimport AxiosService from './services/AxiosService';\r\nimport Loading from './components/utilsTemplates/loading/Loading';\r\nimport 'moment/locale/fr';\r\n\r\nAxiosService.setInterceptors();\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const value = useMemo(() => ({ user, setUser }), [user, setUser]);\r\n\r\n  async function persistSession() {\r\n    await SessionService.refreshTokens();\r\n    setUser(await SessionService.fetchUserData());\r\n    setIsLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (SessionService.getRefreshToken() !== null) {\r\n      persistSession();\r\n    } else {\r\n      console.log(\"Aucun refresh token trouvé, pas d'autologin possible.\");\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  if (isLoading) return <Loading />;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <UserContext.Provider value={value}>\r\n        <Routes />\r\n      </UserContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}